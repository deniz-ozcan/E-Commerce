@model ProductViewModel
@section title {<title>Admin Panel | Scrap App</title>} 
<style >
    .accordion-item {
        background-color: #fff;
        border: 0px solid rgba(0,0,0,.125); 
    }
    .accordion-button{
        padding:1.07rem 1.25rem;
    }
    .hoverme:hover {background-color: #4cb7f9!important;}
    .coverme {background-color: #00ff88!important;}
    .coverme:hover {background-color: #8800ff!important;}
    .colorbut:hover {background-color: #00ff88!important;}
</style>
<div class="container-fluid list-group-item bg-dark">
    <h1 class="text-center p-3 bg-info rounded rounded-4">Admin Panel</h1>
  <div class="row justify-content-center">
    <div class="col-12">
      <div class="accordion" >
        <div class="accordion-item">
          <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne">
            <div class="accordion-body">
              <table class="table sortable">
                <thead>
                  <tr class="coverme">
                    <th scope="col"><button class="btn colorbut">IMAGE<span aria-hidden="true"></span></button></th>
                    <th scope="col"><button class="btn colorbut">BRAND<span aria-hidden="true"></span></button></th>
                    <th scope="col"><button class="btn colorbut">MODEL<span aria-hidden="true"></span></button></th>
                    <th scope="col"><button class="btn colorbut">PRICE<span aria-hidden="true"></span></button></th>
                    <th scope="col"><button class="btn colorbut">RATE<span aria-hidden="true"></span></button></th>
                    <th scope="col"><button class="btn colorbut">RAM<span aria-hidden="true"></span></button></th>
                    <th scope="col"><button class="btn colorbut">STORAGE<span aria-hidden="true"></span></button></th>
                    <th scope="col"><button class="btn colorbut">PROCESSORS<span aria-hidden="true"></span></button></th>
                    <th scope="col"><button class="btn colorbut">SYSTEM<span aria-hidden="true"></span></button></th>
                    <th scope="col"><button class="btn colorbut">SCREEN<span aria-hidden="true"></span></button></th>
                    <th scope="col"><button class="btn colorbut">Updated<span aria-hidden="true"></span></button></th>
                    <th scope="col"></th>
                  </tr>
                </thead>
                <tbody class="table-group-divider">
                  @foreach (var product in Model.Products)
                  {
                    <tr class="hoverme">
                      <td><img src="@product.Image" width="80"></td>
                      <td scope="row">@product.Brand</td>
                      <td scope="row">
                        @(@product.Model.Length > 10 ? @product.Model.Substring(0, 10) + "..." : @product.Model)
                      </td>
                      <td scope="row">@product.Price</td>
                      <td scope="row">
                        <ul class="list-group list-group-horizontal" style="list-style-type: none;font-weight: 400;">
                          @for (int j = 0; j < (int)product.Rate; j++){<li style="color:#FFC000;">★</li>}
                          @for (int k = 0; k < 5-(int)product.Rate; k++){<li style="color:#D8D8D8;">★</li>}
                        </ul>
                      </td>
                      <td scope="row">@product.Ram</td> 
                      <td scope="row">@product.Storage</td> 
                      <td scope="row">@product.Processor</td>
                      <td scope="row">@product.System</td>
                      <td scope="row">@product.Screen</td>
                      <td scope="row">
                        @if(product.isUpdated)
                        {
                          <img src="~/img/check.svg" width="25px"/>
                        }else{
                          <img src="~/img/xmark.svg" width="25px"/>
                        }
                      </td>
                      <td >
                        <form asp-controller="Admin" asp-action="Delete">
                          <input type="hidden" name="slug" value="@product.Id"/>
                          <button type="submit" class="btn btn-danger">Delete</button>
                        </form>
                      </td>
                      </tr>
                  }
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
@section JavaScript {
<script>
    'use strict';
    class SortableTable {
    constructor(tableNode) {
        this.tableNode = tableNode;
        this.columnHeaders = tableNode.querySelectorAll('thead th');
        this.sortColumns = [];
        for (var i = 0; i < this.columnHeaders.length; i++) {
        var ch = this.columnHeaders[i];
        var buttonNode = ch.querySelector('button');
        if (buttonNode) {
            this.sortColumns.push(i);
            buttonNode.setAttribute('data-column-index', i);
            buttonNode.addEventListener('click', this.handleClick.bind(this));
        }
        }
        this.optionCheckbox = document.querySelector(
        'input[type="checkbox"][value="show-unsorted-icon"]'
        );
        if (this.optionCheckbox) {
        this.optionCheckbox.addEventListener(
            'change',
            this.handleOptionChange.bind(this)
        );
        if (this.optionCheckbox.checked) {
            this.tableNode.classList.add('show-unsorted-icon');
        }
        }
    }
    
    setColumnHeaderSort(columnIndex) {
        if (typeof columnIndex === 'string') {
        columnIndex = parseInt(columnIndex);
        }
        for (var i = 0; i < this.columnHeaders.length; i++) {
        var ch = this.columnHeaders[i];
        var buttonNode = ch.querySelector('button');
        if (i === columnIndex) {
            var value = ch.getAttribute('aria-sort');
            if (value === 'descending') {
            ch.setAttribute('aria-sort', 'ascending');
            this.sortColumn(
                columnIndex,
                'ascending',
                ch.classList.contains('num')
            );
            } else {
            ch.setAttribute('aria-sort', 'descending');
            this.sortColumn(
                columnIndex,
                'descending',
                ch.classList.contains('num')
            );
            }
        } else {
            if (ch.hasAttribute('aria-sort') && buttonNode) {
            ch.removeAttribute('aria-sort');
            }
        }
        }
    }
    
    sortColumn(columnIndex, sortValue, isNumber) {
        function compareValues(a, b) {
        if (sortValue === 'ascending') {
            if (a.value === b.value) {
            return 0;
            } else {
            if (isNumber) {
                return a.value - b.value;
            } else {
                return a.value < b.value ? -1 : 1;
            }
            }
        } else {
            if (a.value === b.value) {
            return 0;
            } else {
            if (isNumber) {
                return b.value - a.value;
            } else {
                return a.value > b.value ? -1 : 1;
            }
            }
        }
        }
    
        if (typeof isNumber !== 'boolean') {
        isNumber = false;
        }
    
        var tbodyNode = this.tableNode.querySelector('tbody');
        var rowNodes = [];
        var dataCells = [];
    
        var rowNode = tbodyNode.firstElementChild;
    
        var index = 0;
        while (rowNode) {
        rowNodes.push(rowNode);
        var rowCells = rowNode.querySelectorAll('th, td');
        var dataCell = rowCells[columnIndex];
    
        var data = {};
        data.index = index;
        data.value = dataCell.textContent.toLowerCase().trim();
        if (isNumber) {
            data.value = parseFloat(data.value);
        }
        dataCells.push(data);
        rowNode = rowNode.nextElementSibling;
        index += 1;
        }
    
        dataCells.sort(compareValues);
        while (tbodyNode.firstChild) {
        tbodyNode.removeChild(tbodyNode.lastChild);
        }
        for (var i = 0; i < dataCells.length; i += 1) {
        tbodyNode.appendChild(rowNodes[dataCells[i].index]);
        }
    }
    handleClick(event) {
        var tgt = event.currentTarget;
        this.setColumnHeaderSort(tgt.getAttribute('data-column-index'));
    }
    
    handleOptionChange(event) {
        var tgt = event.currentTarget;
    
        if (tgt.checked) {
        this.tableNode.classList.add('show-unsorted-icon');
        } else {
        this.tableNode.classList.remove('show-unsorted-icon');
        }
    }
    }
    window.addEventListener('load', function () {
    var sortableTables = document.querySelectorAll('table.sortable');
    for (var i = 0; i < sortableTables.length; i++) {
        new SortableTable(sortableTables[i]);
    }
    });
</script>
}